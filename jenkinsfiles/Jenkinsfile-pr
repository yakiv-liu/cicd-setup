pipeline {
    agent {
        label 'centos-slave'
    }
    
    triggers {
        githubPullRequest(
            org: 'your-organization',
            repo: 'your-repository',
            branch: 'main',
            triggerPhrase: '.*test.*',
            onlyTriggerPhrase: false,
            githubApiUrl: 'https://api.github.com',
            successComment: 'PR验证通过，可以合并',
            failureComment: 'PR验证失败，请检查构建日志',
            skipFirstBuild: false,
            cancelBuildsOnUpdate: true
        )
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    environment {
        NEXUS_URL = 'http://192.168.233.8:8081'
        SONAR_URL = 'http://192.168.233.8:9000'
        TRIVY_URL = 'http://192.168.233.9:8084'
    }
    
    stages {
        stage('Checkout PR') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'refs/pull/${CHANGE_ID}/head']],
                    extensions: [
                        [$class: 'CleanCheckout'],
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'src']
                    ],
                    userRemoteConfigs: [[
                        refspec: '+refs/pull/*:refs/remotes/origin/pr/*',
                        url: 'https://github.com/your-organization/your-repository.git',
                        credentialsId: 'github-token'
                    ]]
                ])
                
                dir('src') {
                    sh 'git log -1 --oneline'
                }
            }
        }
        
        stage('Parallel Security & Build') {
            parallel {
                stage('Security Scan') {
                    steps {
                        dir('src') {
                            script {
                                // SonarQube PR分析
                                withSonarQubeEnv('sonarqube') {
                                    sh """
                                        mvn sonar:sonar \
                                        -Dsonar.projectKey=myapp-pr-${CHANGE_ID} \
                                        -Dsonar.projectName='My App PR ${CHANGE_ID}' \
                                        -Dsonar.pullrequest.key=${CHANGE_ID} \
                                        -Dsonar.pullrequest.branch=${CHANGE_BRANCH} \
                                        -Dsonar.pullrequest.base=${CHANGE_TARGET} \
                                        -Dsonar.sources=src/main/java \
                                        -Dsonar.tests=src/test/java \
                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                                    """
                                }
                                
                                // OWASP依赖检查
                                sh 'mvn org.owasp:dependency-check-maven:check -DskipTests'
                                
                                // SpotBugs静态分析
                                sh 'mvn spotbugs:spotbugs -DskipTests'
                                
                                // Trivy漏洞扫描
                                sh '''
                                    trivy filesystem --format sarif --output trivy-report.sarif .
                                '''
                            }
                        }
                    }
                    post {
                        success {
                            script {
                                // 更新GitHub状态
                                updateGitHubCommitStatus(
                                    state: 'SUCCESS',
                                    context: 'security-scan',
                                    description: '安全扫描通过',
                                    targetUrl: "${env.BUILD_URL}"
                                )
                            }
                        }
                        failure {
                            script {
                                updateGitHubCommitStatus(
                                    state: 'FAILURE', 
                                    context: 'security-scan',
                                    description: '安全扫描失败',
                                    targetUrl: "${env.BUILD_URL}"
                                )
                            }
                        }
                    }
                }
                
                stage('Build & Test') {
                    steps {
                        dir('src') {
                            script {
                                // 编译和测试
                                sh '''
                                    mvn clean compile test -T 1C \
                                    -Dmaven.test.failure.ignore=false
                                '''
                                
                                // 生成测试报告
                                sh 'mvn surefire-report:report jacoco:report'
                                
                                // 打包（但不部署）
                                sh 'mvn package -DskipTests'
                            }
                        }
                    }
                    post {
                        success {
                            script {
                                updateGitHubCommitStatus(
                                    state: 'SUCCESS',
                                    context: 'build',
                                    description: '构建测试通过',
                                    targetUrl: "${env.BUILD_URL}"
                                )
                                
                                // 归档测试报告
                                junit 'src/target/surefire-reports/*.xml'
                                publishHTML([
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: true,
                                    keepAll: true,
                                    reportDir: 'src/target/site',
                                    reportFiles: 'surefire-report.html,jacoco/index.html',
                                    reportName: '测试报告'
                                ])
                            }
                        }
                        failure {
                            script {
                                updateGitHubCommitStatus(
                                    state: 'FAILURE',
                                    context: 'build', 
                                    description: '构建测试失败',
                                    targetUrl: "${env.BUILD_URL}"
                                )
                            }
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                dir('src') {
                    script {
                        // 等待SonarQube质量门结果
                        timeout(time: 10, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "质量门未通过: ${qg.status}"
                            }
                        }
                    }
                }
            }
            post {
                success {
                    script {
                        updateGitHubCommitStatus(
                            state: 'SUCCESS',
                            context: 'quality-gate',
                            description: '质量门检查通过',
                            targetUrl: "${env.BUILD_URL}"
                        )
                    }
                }
                failure {
                    script {
                        updateGitHubCommitStatus(
                            state: 'FAILURE',
                            context: 'quality-gate',
                            description: '质量门检查失败', 
                            targetUrl: "${env.BUILD_URL}"
                        )
                    }
                }
            }
        }
    }
    
    post {
        always {
            // 发送PR验证结果到GitHub评论
            script {
                if (currentBuild.result == 'SUCCESS') {
                    githubPRComment comment: "✅ PR验证通过！所有检查均成功完成。\n\n- ✅ 安全扫描通过\n- ✅ 构建测试通过\n- ✅ 质量门检查通过\n\n构建详情: ${env.BUILD_URL}"
                } else if (currentBuild.result == 'FAILURE') {
                    githubPRComment comment: "❌ PR验证失败！请检查以下问题：\n\n- 🔍 查看构建日志: ${env.BUILD_URL}\n- 📊 查看测试报告: ${env.BUILD_URL}testReport/\n- 🛡️ 查看安全扫描结果: http://192.168.233.8:9000/dashboard?id=myapp-pr-${CHANGE_ID}"
                }
            }
            
            // 清理工作空间
            cleanWs()
        }
    }
}
